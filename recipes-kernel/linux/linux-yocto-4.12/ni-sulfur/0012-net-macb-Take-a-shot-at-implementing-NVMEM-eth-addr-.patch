From 2f463bbb434ecc0f388dd93bb0c1e4aef9f7ffa7 Mon Sep 17 00:00:00 2001
From: Moritz Fischer <moritz.fischer@ettus.com>
Date: Fri, 31 Mar 2017 15:32:42 -0700
Subject: [PATCH 12/34] net: macb: Take a shot at implementing NVMEM eth addr
 retrieval

This is still a work in progress.

Signed-off-by: Moritz Fischer <moritz.fischer@ettus.com>
---
 drivers/net/ethernet/cadence/macb.c | 30 ++++++++++++++++++++++++++++++
 1 file changed, 30 insertions(+)

diff --git a/drivers/net/ethernet/cadence/macb.c b/drivers/net/ethernet/cadence/macb.c
index 91f7492623d3..698a5cefb972 100644
--- a/drivers/net/ethernet/cadence/macb.c
+++ b/drivers/net/ethernet/cadence/macb.c
@@ -27,6 +27,7 @@
 #include <linux/platform_data/macb.h>
 #include <linux/platform_device.h>
 #include <linux/phy.h>
+#include <linux/nvmem-consumer.h>
 #include <linux/of.h>
 #include <linux/of_device.h>
 #include <linux/of_gpio.h>
@@ -3227,6 +3228,25 @@ static const struct macb_config default_gem_config = {
 	.jumbo_max_len = 10240,
 };
 
+static void *macb_get_nvmem_address(struct device *dev)
+{
+	struct nvmem_cell *cell;
+	size_t cell_size;
+	char *mac;
+
+	cell = nvmem_cell_get(dev, "address");
+	if (IS_ERR(cell))
+		return cell;
+
+	mac = nvmem_cell_read(cell, &cell_size);
+	nvmem_cell_put(cell);
+
+	if (IS_ERR(mac))
+		return mac;
+
+	return mac;
+}
+
 static int macb_probe(struct platform_device *pdev)
 {
 	const struct macb_config *macb_config = &default_gem_config;
@@ -3337,11 +3357,21 @@ static int macb_probe(struct platform_device *pdev)
 	else
 		dev->max_mtu = ETH_DATA_LEN;
 
+
+	mac = macb_get_nvmem_address(&pdev->dev);
+	if (IS_ERR(mac)) {
+		dev_err(&pdev->dev, "Deferring probe ...\n");
+		return -EPROBE_DEFER;
+	}
+	ether_addr_copy(bp->dev->dev_addr, mac);
+
+	/*
 	mac = of_get_mac_address(np);
 	if (mac)
 		ether_addr_copy(bp->dev->dev_addr, mac);
 	else
 		macb_get_hwaddr(bp);
+		*/
 
 	/* Power up the PHY if there is a GPIO reset */
 	phy_node =  of_get_next_available_child(np, NULL);
-- 
2.14.2

